Exam Question 2: (Singly Linked List)
Ashesi University’s course registration office needs to maintain a dynamic waitlist for an
oversubscribed course. Each record consists of: StudentID, Name, CourseCode, and
Timestamp.
You must implement a singly linked list in Java to manage this waitlist. Your list should support
the following operations:
ADD_FRONT: add a student record to the front of the list
ADD_END: add a student record to the end of the list
ADD_AT: insert a student record at a given position
REMOVE: remove the record for a given StudentID
FIND: retrieve (and print) the record for a given StudentID
DISPLAY: print all records in list order
REVERSE: reverse the entire list in place
Input Format:
ADD_FRONT StudentID Name CourseCode Timestamp
ADD_END
  StudentID Name CourseCode Timestamp
ADD_AT
REMOVE
FIND
DISPLAY
REVERSE
  position StudentID Name CourseCode Timestamp
  StudentID
  StudentID
Output Format: (for each REMOVE, FIND, and DISPLAY):
REMOVE StudentID
Removed StudentID
FIND StudentID
StudentID Name CourseCode Timestamp
DISPLAY
StudentID1 Name1 CourseCode1 Timestamp1
...
StudentIDn Namen CourseCoden Timestampn
Requirements:
1. Implement your own LinkedList class—do not use java.util.LinkedList or other library
list classes.
2. Include code to count and print the total number of node traversals performed across
all REMOVE and FIND operations.
Deliverables:
1. Your solution/program design: a skeleton of the classes with method signatures.
2. Source code in Java defining your LinkedList implementation, the traversal counter, and
a main method to read and execute commands.
3. Be prepared to answer/discuss orally about why a linked list is suitable for dynamic
insertions/removals, comparison against an array-based list, and how your REVERSE
operation works with its time complexity.
4. At least two test cases showing the sequence of input operations, the expected output
for the REMOVE, FIND, and DISPLAY commands, the actual output, and the total
traversal count printed by your program.